
module DecreaseCount
#(parameter N=2)
(
  input wire clk,          //Clock para testear
  input wire btn_decrement,//Boton para bajar el numero
  input wire btn_reset,    //Boton de reseteo
  output reg [2**N:0] count//El contador de los bits
);


always @(posedge clk or negedge btn_decrement or negedge btn_reset) begin
  if (~btn_decrement) begin // decrement button pressed
    if (count > 0) begin // decrement count if non-zero
      count <= count - 1;
    end
  end

  if (~btn_reset) begin // reset button pressed
    count <= 2**N; // reset count to zero
  end
end

endmodule


module DecreaseCount_tb;

  // Parameters
  parameter N = 6; // Counter size

  // Inputs
  logic clk;
  logic btn_decrement;
  logic btn_reset;

  // Outputs
  logic [2**N:0] count;

  // Instantiate the DUT
  DecreaseCount dut (
    .clk(clk),
    .btn_decrement(btn_decrement),
    .btn_reset(btn_reset),
    .count(count)
  );

  // Clock generator
  always #5 clk = ~clk;

  // Initialize inputs
  initial begin
    clk = 0;
    btn_decrement = 1;
    btn_reset = 1;
    count = 0;
    #10;
  end

  // Test button press
  task test_button;
    #5 btn_decrement = 0; // Press decrement button
    #10 btn_decrement = 1; // Release decrement button
  endtask

  // Test counter decrement
  task test_decrement;
    #5 btn_decrement = 0; // Press decrement button
    #5 btn_decrement = 1; // Release decrement button
    #5 $display("Count: %0d", count); // Should be 15 (if N=4)
    #5 btn_decrement = 0; // Press decrement button again
    #5 btn_decrement = 1; // Release decrement button
    #5 $display("Count: %0d", count); // Should be 14 (if N=4)
  endtask

  // Test counter reset
  task test_reset;
    #5 btn_reset = 0; // Press reset button
    #10 btn_reset = 1; // Release reset button
    #5 $display("Count: %0d", count); // Should be 0
  endtask

  // Run tests
  initial begin
    test_button();
    test_decrement();
    test_reset();
    #10 $finish;
  end

endmodule
